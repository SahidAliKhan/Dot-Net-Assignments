﻿Delegates--- Delegate is a reference type.
---------
1)Delegates are function pointer which have same signature as
that of the function/method.(Encapsulation)

2)Achieve type safety.
Typesafety--- variables are checked for appropriate assignment at compile time.

delegate d----> function f

d()

3) Delegates for working with events, so they are called event handlers.
they handle the event.
One who calls the code to execute is a delegate,
the delegate calls the method(code) when it receives a notification from the 
object that a particular condition is occurs.

event e----->delegate d----->function f(safe)

4) They are used in multithreading extensively.




public int CalculateAge(int year)
{

}
------------------------------
public void Display(int id)
{
cw(empid);
cw(ename);
}

Object of class.
Obj.Display(1);
int age=obj.calculateage(1988);

*******************************************************
How to work with Delegates?
1) Declare the delegate
2) create object of delegate and pass the 
reference of the method to the delegate.
3) Invoke the delegate
-------------------------------------------------------

delegate is defined under System namespace.
There r 2 types of delegates:
1) Unicast--If a delegate points to a single method it is unicast delegate
Unicast delegate can have basic return types(int,float,string,double etc)
----------------------------------------------
2) Multicast----If a delegate points to multiple method(chain of methods)
it is a multicast delegate.
Do not have a return type other than void.
MulticastDelegate Class---->
combine
remove
removeall
-------------------------------------------------------------

Person Class


person Walks------> calories go down----> 50--- >invoke hunger event----->
is associated with PersonHunger----->delegate object & invokation.



delegate---- reference type
Delegate-----Class
------------------------------------------------

Generic Delegates----
Lambda Expressions----> are anonymous functions that contain expressions
and/or a sequence of operators
Expressions
Parameter=>expression
parameterlist=>expression


Function Lambda
Action Lambda
Predicate Lambda